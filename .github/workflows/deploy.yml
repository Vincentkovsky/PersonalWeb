name: Deploy to GitHub Pages

# 这个工作流使用了以下GitHub仓库密钥(Repository Secrets):
# - DEPLOY_SSH_KEY: 用于部署到GitHub Pages的SSH私钥
# - API_KEY: 可选，用于访问外部API的密钥
# - FIREBASE_TOKEN: 可选，用于部署到Firebase的令牌
#
# 如何添加密钥:
# 1. 打开GitHub仓库页面
# 2. 点击 Settings > Secrets and variables > Actions
# 3. 点击 "New repository secret" 按钮
# 4. 添加密钥名称和值

on:
  push:
    branches:
      - main
  workflow_dispatch: # 允许手动触发工作流
    inputs:
      environment:
        description: "部署环境"
        required: true
        default: "production"
        type: choice
        options:
          - production
          - staging
          - development

# 环境变量
env:
  NODE_VERSION: 18

permissions:
  contents: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # 获取完整历史

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      # 设置环境变量
      - name: Set Environment Variables
        run: |
          # 设置构建环境
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "BUILD_ENV=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          else
            echo "BUILD_ENV=production" >> $GITHUB_ENV
          fi

          # 如果提供了API密钥，添加到环境变量
          if [ -n "${{ secrets.API_KEY }}" ]; then
            echo "VITE_API_KEY=${{ secrets.API_KEY }}" >> $GITHUB_ENV
          fi

          # 设置提交消息
          echo "COMMIT_MESSAGE=Deploy: ${{ github.event.head_commit.message || 'Manual deployment' }}" >> $GITHUB_ENV

          # 设置Git用户信息
          echo "GIT_USERNAME=GitHub Actions" >> $GITHUB_ENV
          echo "GIT_EMAIL=actions@github.com" >> $GITHUB_ENV

          # 检查是否有SSH密钥
          if [ -n "${{ secrets.DEPLOY_SSH_KEY }}" ]; then
            echo "HAS_SSH_KEY=true" >> $GITHUB_ENV
          else
            echo "HAS_SSH_KEY=false" >> $GITHUB_ENV
          fi

          # 检查是否有Firebase令牌
          if [ -n "${{ secrets.FIREBASE_TOKEN }}" ]; then
            echo "HAS_FIREBASE_TOKEN=true" >> $GITHUB_ENV
          else
            echo "HAS_FIREBASE_TOKEN=false" >> $GITHUB_ENV
          fi

      - name: Build
        run: |
          echo "开始为 GitHub Pages 构建，环境: $BUILD_ENV"

          if [ "$BUILD_ENV" = "production" ]; then
            npm run build
          else
            npm run build:$BUILD_ENV
          fi

          echo "构建完成。检查 dist 目录内容:"
          ls -la dist/

          # 确认 index.html 是否生成且有内容
          if [ ! -f "dist/index.html" ] || ! [ -s "dist/index.html" ]; then
            echo "错误: dist/index.html 未生成或为空!"
            exit 1
          fi

          # 从 client/404.html (如果存在) 或 dist/index.html 创建 dist/404.html
          if [ -f "client/404.html" ]; then
            echo "使用 client/404.html 作为 dist/404.html"
            cp client/404.html dist/404.html
          elif [ -f "dist/index.html" ]; then
            echo "从 dist/index.html 创建 dist/404.html"
            cp dist/index.html dist/404.html
          else
            echo "警告: 无法创建 dist/404.html 因为源文件不存在。"
          fi

          # 创建 .nojekyll 文件以禁用 GitHub Pages 的 Jekyll 处理
          echo "创建 .nojekyll 文件"
          touch dist/.nojekyll

      # 部署到当前仓库的 gh-pages 分支 (用于备份)
      - name: Deploy to gh-pages branch
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: dist
          branch: gh-pages
          clean: true
          commit-message: ${{ env.COMMIT_MESSAGE }}

      # 设置部署密钥
      - name: Set up SSH key
        if: ${{ env.HAS_SSH_KEY == 'true' }}
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

      # 配置 Git
      - name: Configure Git
        run: |
          git config --global user.name "${{ env.GIT_USERNAME }}"
          git config --global user.email "${{ env.GIT_EMAIL }}"

      # 克隆目标仓库到临时目录
      - name: Clone target repository
        run: |
          mkdir -p /tmp/gh-pages-repo

          # 根据是否有SSH密钥选择克隆方式
          if [ "$HAS_SSH_KEY" = "true" ]; then
            # 使用SSH密钥
            git clone git@github.com:Vincentkovsky/vincentkovsky.github.io.git /tmp/gh-pages-repo
          elif [ -n "${{ secrets.GITHUB_TOKEN }}" ]; then
            # 使用GitHub Token
            git clone https://${{ secrets.GITHUB_TOKEN }}@github.com/Vincentkovsky/vincentkovsky.github.io.git /tmp/gh-pages-repo
          else
            # 使用默认权限
            git clone https://github.com/Vincentkovsky/vincentkovsky.github.io.git /tmp/gh-pages-repo
          fi

          # 清空目标仓库内容 (保留 .git 目录)
          find /tmp/gh-pages-repo -mindepth 1 -maxdepth 1 -not -path "/tmp/gh-pages-repo/.git" -exec rm -rf {} \;

          # 复制新构建的文件
          cp -r dist/* /tmp/gh-pages-repo/

          # 提交和推送
          cd /tmp/gh-pages-repo
          git add -A
          git commit -m "${{ env.COMMIT_MESSAGE }}" || echo "No changes to commit"
          git push origin main

      # 可选: 部署到Firebase
      - name: Deploy to Firebase
        if: ${{ env.HAS_FIREBASE_TOKEN == 'true' }}
        run: |
          echo "部署到Firebase..."
          npm install -g firebase-tools
          firebase deploy --token ${{ secrets.FIREBASE_TOKEN }}
