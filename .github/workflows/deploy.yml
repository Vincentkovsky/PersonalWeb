name: Deploy to GitHub Pages

on:
  push:
    branches:
      - main
  workflow_dispatch: # 允许手动触发工作流

permissions:
  contents: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # 获取完整历史

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      # 创建包含 Firebase 配置的 .env 文件
      - name: Create Firebase env file
        run: |
          echo "创建 Firebase 配置环境变量..."
          cat > .env << EOL
          # Firebase Configuration
          VITE_FIREBASE_API_KEY=AIzaSyDQ1AaF0akvP-Q_Lu1xM_Eh0WWiiYVbJXw
          VITE_FIREBASE_AUTH_DOMAIN=vincentkovsky.firebaseapp.com
          VITE_FIREBASE_PROJECT_ID=vincentkovsky
          VITE_FIREBASE_STORAGE_BUCKET=vincentkovsky.firebasestorage.app
          VITE_FIREBASE_MESSAGING_SENDER_ID=773913920947
          VITE_FIREBASE_APP_ID=1:773913920947:web:d4f51c8c4b81c6fe4577c6
          EOL

          echo "环境变量文件创建完成"

      - name: Build
        run: |
          echo "开始为 GitHub Pages 构建..."
          npm run build

          echo "构建完成。检查 dist 目录内容:"
          ls -la dist/

          # 确认 index.html 是否生成且有内容
          if [ ! -f "dist/index.html" ] || ! [ -s "dist/index.html" ]; then
            echo "错误: dist/index.html 未生成或为空!"
            exit 1
          fi

          # 从 client/404.html (如果存在) 或 dist/index.html 创建 dist/404.html
          if [ -f "client/404.html" ]; then
            echo "使用 client/404.html 作为 dist/404.html"
            cp client/404.html dist/404.html
          elif [ -f "dist/index.html" ]; then
            echo "从 dist/index.html 创建 dist/404.html"
            cp dist/index.html dist/404.html
          else
            echo "警告: 无法创建 dist/404.html 因为源文件不存在。"
          fi

          # 创建 .nojekyll 文件以禁用 GitHub Pages 的 Jekyll 处理
          echo "创建 .nojekyll 文件"
          touch dist/.nojekyll

      # 部署到当前仓库的 gh-pages 分支 (用于备份)
      - name: Deploy to gh-pages branch
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: dist
          branch: gh-pages
          clean: true
          commit-message: "Deploy: ${{ github.event.head_commit.message }}"

      # 设置部署密钥
      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

      # 配置 Git
      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      # 克隆目标仓库到临时目录
      - name: Clone target repository
        run: |
          mkdir -p /tmp/gh-pages-repo
          git clone git@github.com:Vincentkovsky/vincentkovsky.github.io.git /tmp/gh-pages-repo

          # 清空目标仓库内容 (保留 .git 目录)
          find /tmp/gh-pages-repo -mindepth 1 -maxdepth 1 -not -path "/tmp/gh-pages-repo/.git" -exec rm -rf {} \;

          # 复制新构建的文件
          cp -r dist/* /tmp/gh-pages-repo/

          # 提交和推送
          cd /tmp/gh-pages-repo
          git add -A
          git commit -m "Deploy: ${{ github.event.head_commit.message }}" || echo "No changes to commit"
          git push origin main
